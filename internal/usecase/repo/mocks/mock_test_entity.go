// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "go-loyalty-system/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockUserService) CreateToken(ctx context.Context, t *entity.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockUserServiceMockRecorder) CreateToken(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockUserService)(nil).CreateToken), ctx, t)
}

// GetUnprocessedOrders mocks base method.
func (m *MockUserService) GetUnprocessedOrders(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockUserServiceMockRecorder) GetUnprocessedOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockUserService)(nil).GetUnprocessedOrders), ctx)
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(ctx context.Context, u entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), ctx, u)
}

// GetUserByLogin mocks base method.
func (m *MockUserService) GetUserByLogin(ctx context.Context, u entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserServiceMockRecorder) GetUserByLogin(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserService)(nil).GetUserByLogin), ctx, u)
}

// GetUserOrders mocks base method.
func (m *MockUserService) GetUserOrders(ctx context.Context, userID uint) ([]entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockUserServiceMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockUserService)(nil).GetUserOrders), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockUserService) GetUserWithdrawals(ctx context.Context, userID uint) ([]entity.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]entity.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockUserServiceMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockUserService)(nil).GetUserWithdrawals), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockUserService) GetUsers(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserService)(nil).GetUsers), ctx)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), ctx, u)
}

// SaveAccrual mocks base method.
func (m *MockUserService) SaveAccrual(ctx context.Context, orderNumber, status string, accrual float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccrual", ctx, orderNumber, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccrual indicates an expected call of SaveAccrual.
func (mr *MockUserServiceMockRecorder) SaveAccrual(ctx, orderNumber, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccrual", reflect.TypeOf((*MockUserService)(nil).SaveAccrual), ctx, orderNumber, status, accrual)
}

// SetOrders mocks base method.
func (m *MockUserService) SetOrders(ctx context.Context, userID uint, o entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrders", ctx, userID, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrders indicates an expected call of SetOrders.
func (mr *MockUserServiceMockRecorder) SetOrders(ctx, userID, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrders", reflect.TypeOf((*MockUserService)(nil).SetOrders), ctx, userID, o)
}

// WithdrawBalance mocks base method.
func (m *MockUserService) WithdrawBalance(ctx context.Context, withdrawal entity.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawBalance", ctx, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawBalance indicates an expected call of WithdrawBalance.
func (mr *MockUserServiceMockRecorder) WithdrawBalance(ctx, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawBalance", reflect.TypeOf((*MockUserService)(nil).WithdrawBalance), ctx, withdrawal)
}

// MockTestEntity is a mock of TestEntity interface.
type MockTestEntity struct {
	ctrl     *gomock.Controller
	recorder *MockTestEntityMockRecorder
}

// MockTestEntityMockRecorder is the mock recorder for MockTestEntity.
type MockTestEntityMockRecorder struct {
	mock *MockTestEntity
}

// NewMockTestEntity creates a new mock instance.
func NewMockTestEntity(ctrl *gomock.Controller) *MockTestEntity {
	mock := &MockTestEntity{ctrl: ctrl}
	mock.recorder = &MockTestEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestEntity) EXPECT() *MockTestEntityMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockTestEntity) AddOrder(orderNumber string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrder", orderNumber)
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockTestEntityMockRecorder) AddOrder(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockTestEntity)(nil).AddOrder), orderNumber)
}

// CreateToken mocks base method.
func (m *MockTestEntity) CreateToken(ctx context.Context, t *entity.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTestEntityMockRecorder) CreateToken(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTestEntity)(nil).CreateToken), ctx, t)
}

// GenerateToken mocks base method.
func (m *MockTestEntity) GenerateToken(user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTestEntityMockRecorder) GenerateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTestEntity)(nil).GenerateToken), user)
}

// PersistToken mocks base method.
func (m *MockTestEntity) PersistToken(user *entity.User, tokenID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistToken", user, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistToken indicates an expected call of PersistToken.
func (mr *MockTestEntityMockRecorder) PersistToken(user, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistToken", reflect.TypeOf((*MockTestEntity)(nil).PersistToken), user, tokenID)
}
