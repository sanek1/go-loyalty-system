// Code generated by MockGen. DO NOT EDIT.
// Source: balance_pg.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "go-loyalty-system/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockBalanceUseCase is a mock of BalanceUseCase interface.
type MockBalanceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceUseCaseMockRecorder
}

// MockBalanceUseCaseMockRecorder is the mock recorder for MockBalanceUseCase.
type MockBalanceUseCaseMockRecorder struct {
	mock *MockBalanceUseCase
}

// NewMockBalanceUseCase creates a new mock instance.
func NewMockBalanceUseCase(ctrl *gomock.Controller) *MockBalanceUseCase {
	mock := &MockBalanceUseCase{ctrl: ctrl}
	mock.recorder = &MockBalanceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceUseCase) EXPECT() *MockBalanceUseCaseMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockBalanceUseCase) BeginTx(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockBalanceUseCaseMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockBalanceUseCase)(nil).BeginTx), ctx)
}

// CreateWithdrawalTx mocks base method.
func (m *MockBalanceUseCase) CreateWithdrawalTx(ctx context.Context, withdrawal entity.Withdrawal, order *entity.OrderResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawalTx", ctx, withdrawal, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawalTx indicates an expected call of CreateWithdrawalTx.
func (mr *MockBalanceUseCaseMockRecorder) CreateWithdrawalTx(ctx, withdrawal, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawalTx", reflect.TypeOf((*MockBalanceUseCase)(nil).CreateWithdrawalTx), ctx, withdrawal, order)
}

// GetBalance mocks base method.
func (m *MockBalanceUseCase) GetBalance(ctx context.Context, userID string) (*entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(*entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceUseCaseMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceUseCase)(nil).GetBalance), ctx, userID)
}

// GetBalanceTx mocks base method.
func (m *MockBalanceUseCase) GetBalanceTx(ctx context.Context, tx pgx.Tx, userID uint) (*entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceTx", ctx, tx, userID)
	ret0, _ := ret[0].(*entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceTx indicates an expected call of GetBalanceTx.
func (mr *MockBalanceUseCaseMockRecorder) GetBalanceTx(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceTx", reflect.TypeOf((*MockBalanceUseCase)(nil).GetBalanceTx), ctx, tx, userID)
}

// GetUserByLogin mocks base method.
func (m *MockBalanceUseCase) GetUserByLogin(ctx context.Context, u entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockBalanceUseCaseMockRecorder) GetUserByLogin(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockBalanceUseCase)(nil).GetUserByLogin), ctx, u)
}

// GetUserWithdrawals mocks base method.
func (m *MockBalanceUseCase) GetUserWithdrawals(ctx context.Context, userID uint) ([]entity.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]entity.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockBalanceUseCaseMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockBalanceUseCase)(nil).GetUserWithdrawals), ctx, userID)
}

// UpdateBalanceTx mocks base method.
func (m *MockBalanceUseCase) UpdateBalanceTx(ctx context.Context, tx pgx.Tx, userID uint, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTx", ctx, tx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTx indicates an expected call of UpdateBalanceTx.
func (mr *MockBalanceUseCaseMockRecorder) UpdateBalanceTx(ctx, tx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTx", reflect.TypeOf((*MockBalanceUseCase)(nil).UpdateBalanceTx), ctx, tx, userID, amount)
}
