// Code generated by MockGen. DO NOT EDIT.
// Source: order_pg.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "go-loyalty-system/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// CheckOrderExistence mocks base method.
func (m *MockOrderUseCase) CheckOrderExistence(ctx context.Context, orderNumber string, userID uint) (bool, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderExistence", ctx, orderNumber, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckOrderExistence indicates an expected call of CheckOrderExistence.
func (mr *MockOrderUseCaseMockRecorder) CheckOrderExistence(ctx, orderNumber, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderExistence", reflect.TypeOf((*MockOrderUseCase)(nil).CheckOrderExistence), ctx, orderNumber, userID)
}

// GetOrderByNumber mocks base method.
func (m *MockOrderUseCase) GetOrderByNumber(ctx context.Context, orderNumber string) (*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockOrderUseCaseMockRecorder) GetOrderByNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockOrderUseCase)(nil).GetOrderByNumber), ctx, orderNumber)
}

// GetUserOrders mocks base method.
func (m *MockOrderUseCase) GetUserOrders(ctx context.Context, userID uint) ([]entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderUseCaseMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetUserOrders), ctx, userID)
}

// SetOrders mocks base method.
func (m *MockOrderUseCase) SetOrders(ctx context.Context, userID uint, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrders", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrders indicates an expected call of SetOrders.
func (mr *MockOrderUseCaseMockRecorder) SetOrders(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrders", reflect.TypeOf((*MockOrderUseCase)(nil).SetOrders), ctx, userID, order)
}

// ValidateOrder mocks base method.
func (m *MockOrderUseCase) ValidateOrder(order entity.Order, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOrder", order, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateOrder indicates an expected call of ValidateOrder.
func (mr *MockOrderUseCaseMockRecorder) ValidateOrder(order, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOrder", reflect.TypeOf((*MockOrderUseCase)(nil).ValidateOrder), order, userID)
}
