// Code generated by MockGen. DO NOT EDIT.
// Source: accrual_pg.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ExistOrderAccrual mocks base method.
func (m *MockRepository) ExistOrderAccrual(ctx context.Context, orderNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistOrderAccrual", ctx, orderNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistOrderAccrual indicates an expected call of ExistOrderAccrual.
func (mr *MockRepositoryMockRecorder) ExistOrderAccrual(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistOrderAccrual", reflect.TypeOf((*MockRepository)(nil).ExistOrderAccrual), ctx, orderNumber)
}

// GetUnprocessedOrders mocks base method.
func (m *MockRepository) GetUnprocessedOrders(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockRepositoryMockRecorder) GetUnprocessedOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockRepository)(nil).GetUnprocessedOrders), ctx)
}

// SaveAccrual mocks base method.
func (m *MockRepository) SaveAccrual(ctx context.Context, orderNumber, status string, accrual float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccrual", ctx, orderNumber, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccrual indicates an expected call of SaveAccrual.
func (mr *MockRepositoryMockRecorder) SaveAccrual(ctx, orderNumber, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccrual", reflect.TypeOf((*MockRepository)(nil).SaveAccrual), ctx, orderNumber, status, accrual)
}
