// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	entity "go-loyalty-system/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockGopherMartRepo is a mock of GopherMartRepo interface.
type MockGopherMartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGopherMartRepoMockRecorder
}

// MockGopherMartRepoMockRecorder is the mock recorder for MockGopherMartRepo.
type MockGopherMartRepoMockRecorder struct {
	mock *MockGopherMartRepo
}

// NewMockGopherMartRepo creates a new mock instance.
func NewMockGopherMartRepo(ctrl *gomock.Controller) *MockGopherMartRepo {
	mock := &MockGopherMartRepo{ctrl: ctrl}
	mock.recorder = &MockGopherMartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGopherMartRepo) EXPECT() *MockGopherMartRepoMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockGopherMartRepo) BeginTx(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockGopherMartRepoMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockGopherMartRepo)(nil).BeginTx), ctx)
}

// CheckOrderExistence mocks base method.
func (m *MockGopherMartRepo) CheckOrderExistence(ctx context.Context, orderNumber string, userID uint) (bool, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderExistence", ctx, orderNumber, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckOrderExistence indicates an expected call of CheckOrderExistence.
func (mr *MockGopherMartRepoMockRecorder) CheckOrderExistence(ctx, orderNumber, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderExistence", reflect.TypeOf((*MockGopherMartRepo)(nil).CheckOrderExistence), ctx, orderNumber, userID)
}

// CreateToken mocks base method.
func (m *MockGopherMartRepo) CreateToken(ctx context.Context, u *entity.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockGopherMartRepoMockRecorder) CreateToken(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockGopherMartRepo)(nil).CreateToken), ctx, u)
}

// CreateWithdrawalTx mocks base method.
func (m *MockGopherMartRepo) CreateWithdrawalTx(ctx context.Context, withdrawal entity.Withdrawal, order *entity.OrderResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawalTx", ctx, withdrawal, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawalTx indicates an expected call of CreateWithdrawalTx.
func (mr *MockGopherMartRepoMockRecorder) CreateWithdrawalTx(ctx, withdrawal, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawalTx", reflect.TypeOf((*MockGopherMartRepo)(nil).CreateWithdrawalTx), ctx, withdrawal, order)
}

// ExistOrderAccrual mocks base method.
func (m *MockGopherMartRepo) ExistOrderAccrual(ctx context.Context, orderNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistOrderAccrual", ctx, orderNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistOrderAccrual indicates an expected call of ExistOrderAccrual.
func (mr *MockGopherMartRepoMockRecorder) ExistOrderAccrual(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistOrderAccrual", reflect.TypeOf((*MockGopherMartRepo)(nil).ExistOrderAccrual), ctx, orderNumber)
}

// GetBalance mocks base method.
func (m *MockGopherMartRepo) GetBalance(ctx context.Context, userID string) (*entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(*entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockGopherMartRepoMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockGopherMartRepo)(nil).GetBalance), ctx, userID)
}

// GetBalanceTx mocks base method.
func (m *MockGopherMartRepo) GetBalanceTx(ctx context.Context, tx pgx.Tx, userID uint) (*entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceTx", ctx, tx, userID)
	ret0, _ := ret[0].(*entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceTx indicates an expected call of GetBalanceTx.
func (mr *MockGopherMartRepoMockRecorder) GetBalanceTx(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceTx", reflect.TypeOf((*MockGopherMartRepo)(nil).GetBalanceTx), ctx, tx, userID)
}

// GetOrderByNumber mocks base method.
func (m *MockGopherMartRepo) GetOrderByNumber(ctx context.Context, orderNumber string) (*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockGopherMartRepoMockRecorder) GetOrderByNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockGopherMartRepo)(nil).GetOrderByNumber), ctx, orderNumber)
}

// GetUnprocessedOrders mocks base method.
func (m *MockGopherMartRepo) GetUnprocessedOrders(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockGopherMartRepoMockRecorder) GetUnprocessedOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockGopherMartRepo)(nil).GetUnprocessedOrders), ctx)
}

// GetUserByEmail mocks base method.
func (m *MockGopherMartRepo) GetUserByEmail(ctx context.Context, u entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockGopherMartRepoMockRecorder) GetUserByEmail(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockGopherMartRepo)(nil).GetUserByEmail), ctx, u)
}

// GetUserByLogin mocks base method.
func (m *MockGopherMartRepo) GetUserByLogin(ctx context.Context, u entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, u)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockGopherMartRepoMockRecorder) GetUserByLogin(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockGopherMartRepo)(nil).GetUserByLogin), ctx, u)
}

// GetUserOrders mocks base method.
func (m *MockGopherMartRepo) GetUserOrders(ctx context.Context, userID uint) ([]entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockGopherMartRepoMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockGopherMartRepo)(nil).GetUserOrders), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockGopherMartRepo) GetUsers(arg0 context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGopherMartRepoMockRecorder) GetUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGopherMartRepo)(nil).GetUsers), arg0)
}

// GetWithdrawals mocks base method.
func (m *MockGopherMartRepo) GetWithdrawals(ctx context.Context, userID uint) ([]entity.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]entity.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockGopherMartRepoMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockGopherMartRepo)(nil).GetWithdrawals), ctx, userID)
}

// RegisterUser mocks base method.
func (m *MockGopherMartRepo) RegisterUser(ctx context.Context, u entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockGopherMartRepoMockRecorder) RegisterUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockGopherMartRepo)(nil).RegisterUser), ctx, u)
}

// SaveAccrual mocks base method.
func (m *MockGopherMartRepo) SaveAccrual(ctx context.Context, orderNumber, status string, accrual float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccrual", ctx, orderNumber, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccrual indicates an expected call of SaveAccrual.
func (mr *MockGopherMartRepoMockRecorder) SaveAccrual(ctx, orderNumber, status, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccrual", reflect.TypeOf((*MockGopherMartRepo)(nil).SaveAccrual), ctx, orderNumber, status, accrual)
}

// SetOrders mocks base method.
func (m *MockGopherMartRepo) SetOrders(ctx context.Context, userID uint, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrders", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrders indicates an expected call of SetOrders.
func (mr *MockGopherMartRepoMockRecorder) SetOrders(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrders", reflect.TypeOf((*MockGopherMartRepo)(nil).SetOrders), ctx, userID, order)
}

// UpdateBalanceTx mocks base method.
func (m *MockGopherMartRepo) UpdateBalanceTx(ctx context.Context, tx pgx.Tx, userID uint, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTx", ctx, tx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTx indicates an expected call of UpdateBalanceTx.
func (mr *MockGopherMartRepoMockRecorder) UpdateBalanceTx(ctx, tx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTx", reflect.TypeOf((*MockGopherMartRepo)(nil).UpdateBalanceTx), ctx, tx, userID, amount)
}

// ValidateOrder mocks base method.
func (m *MockGopherMartRepo) ValidateOrder(order entity.Order, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOrder", order, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateOrder indicates an expected call of ValidateOrder.
func (mr *MockGopherMartRepoMockRecorder) ValidateOrder(order, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOrder", reflect.TypeOf((*MockGopherMartRepo)(nil).ValidateOrder), order, userID)
}
